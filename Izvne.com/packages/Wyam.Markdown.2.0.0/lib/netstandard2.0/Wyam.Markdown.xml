<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wyam.Markdown</name>
    </assembly>
    <members>
        <member name="T:Wyam.Markdown.Markdown">
            <summary>
            Parses markdown content and renders it to HTML.
            </summary>
            <remarks>
            Parses markdown content in each input document and outputs documents with rendered HTML content.
            Note that <c>@</c> (at) symbols will be automatically HTML escaped for better compatibility with downstream
            Razor modules. If you want to include a raw <c>@</c> symbol when <c>EscapeAt()</c> is <c>true</c>, use
            <c>\@</c>. Use the <c>EscapeAt()</c> fluent method to modify this behavior.
            </remarks>
            <category>Templates</category>
        </member>
        <member name="F:Wyam.Markdown.Markdown.DefaultConfiguration">
            <summary>
            The default Markdown configuration.
            </summary>
        </member>
        <member name="M:Wyam.Markdown.Markdown.#ctor">
            <summary>
            Processes Markdown in the content of the document.
            </summary>
        </member>
        <member name="M:Wyam.Markdown.Markdown.#ctor(System.String,System.String)">
            <summary>
            Processes Markdown in the metadata of the document. The rendered HTML will be placed
            </summary>
            <param name="sourceKey">The metadata key of the Markdown to process.</param>
            <param name="destinationKey">The metadata key to store the rendered HTML (if null, it gets placed back in the source metadata key).</param>
        </member>
        <member name="M:Wyam.Markdown.Markdown.EscapeAt(System.Boolean)">
            <summary>
            Specifies whether the <c>@</c> symbol should be escaped (the default is <c>true</c>).
            This is important if the Markdown documents are going to be passed to the Razor module,
            otherwise the Razor processor will interpret the unescaped <c>@</c> symbols as code
            directives.
            If you want to include a raw <c>@</c> symbol when <c>EscapeAt()</c> is <c>true</c>, use <c>\@</c>.
            </summary>
            <param name="escapeAt">If set to <c>true</c>, <c>@</c> symbols are HTML escaped.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Markdown.Markdown.UseExtensions">
            <summary>
            Includes a set of useful advanced extensions, e.g., citations, footers, footnotes, math,
            grid-tables, pipe-tables, and tasks, in the Markdown processing pipeline.
            </summary>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Markdown.Markdown.UseConfiguration(System.String)">
            <summary>
            Includes a set of extensions defined as a string, e.g., "pipetables", "citations",
            "mathematics", or "abbreviations". Separate different extensions with a '+'.
            </summary>
            <param name="extensions">The extensions string.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Markdown.Markdown.UseExtension``1">
            <summary>
            Includes a custom extension in the markdown processing given by a class implementing
            the IMarkdownExtension interface.
            </summary>
            <typeparam name="TExtension">The type of the extension to use.</typeparam>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Markdown.Markdown.UseExtension``1(``0)">
            <summary>
            Includes a custom extension in the markdown processing given by a object implementing
            the IMarkdownExtension interface.
            </summary>
            <param name="extension">A object that that implement <see cref="T:Markdig.IMarkdownExtension"/>.</param>
            <typeparam name="TExtension">The type of the extension to use.</typeparam>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Markdown.Markdown.UseExtensions(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Includes multiple custom extension in the markdown processing given by classes implementing
            the <see cref="T:Markdig.IMarkdownExtension"/> interface.
            </summary>
            <param name="extensions">A sequence of types that implement <see cref="T:Markdig.IMarkdownExtension"/>.</param>
            <returns>The current module instance.</returns>
        </member>
        <member name="M:Wyam.Markdown.Markdown.Execute(System.Collections.Generic.IReadOnlyList{Wyam.Common.Documents.IDocument},Wyam.Common.Execution.IExecutionContext)">
            <inheritdoc />
        </member>
    </members>
</doc>
